digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a <= 1

IRs:
TMP_466(bool) = a <= 1
CONDITION TMP_466"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
a

IRs:
RETURN a"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
aa = a

IRs:
aa(uint256) := a(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
xn = 1

IRs:
xn(uint256) := 1(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
aa >= (1 << 128)

IRs:
TMP_467(uint256) = 1 << 128
TMP_468(bool) = aa >= TMP_467
CONDITION TMP_468"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
aa >>= 128

IRs:
aa(uint256) = aa >> 128"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
xn <<= 64

IRs:
xn(uint256) = xn << 64"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
aa >= (1 << 64)

IRs:
TMP_469(uint256) = 1 << 64
TMP_470(bool) = aa >= TMP_469
CONDITION TMP_470"];
10->11[label="True"];
10->13[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
aa >>= 64

IRs:
aa(uint256) = aa >> 64"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
xn <<= 32

IRs:
xn(uint256) = xn << 32"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
aa >= (1 << 32)

IRs:
TMP_471(uint256) = 1 << 32
TMP_472(bool) = aa >= TMP_471
CONDITION TMP_472"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
aa >>= 32

IRs:
aa(uint256) = aa >> 32"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
xn <<= 16

IRs:
xn(uint256) = xn << 16"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
aa >= (1 << 16)

IRs:
TMP_473(uint256) = 1 << 16
TMP_474(bool) = aa >= TMP_473
CONDITION TMP_474"];
18->19[label="True"];
18->21[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
aa >>= 16

IRs:
aa(uint256) = aa >> 16"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
xn <<= 8

IRs:
xn(uint256) = xn << 8"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
aa >= (1 << 8)

IRs:
TMP_475(uint256) = 1 << 8
TMP_476(bool) = aa >= TMP_475
CONDITION TMP_476"];
22->23[label="True"];
22->25[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
aa >>= 8

IRs:
aa(uint256) = aa >> 8"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
xn <<= 4

IRs:
xn(uint256) = xn << 4"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
aa >= (1 << 4)

IRs:
TMP_477(uint256) = 1 << 4
TMP_478(bool) = aa >= TMP_477
CONDITION TMP_478"];
26->27[label="True"];
26->29[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
aa >>= 4

IRs:
aa(uint256) = aa >> 4"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
xn <<= 2

IRs:
xn(uint256) = xn << 2"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: IF 30

EXPRESSION:
aa >= (1 << 2)

IRs:
TMP_479(uint256) = 1 << 2
TMP_480(bool) = aa >= TMP_479
CONDITION TMP_480"];
30->31[label="True"];
30->32[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
xn <<= 1

IRs:
xn(uint256) = xn << 1"];
31->32;
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
xn = (3 * xn) >> 1

IRs:
TMP_481(uint256) = 3 * xn
TMP_482(uint256) = TMP_481 >> 1
xn(uint256) := TMP_482(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
xn = (xn + a / xn) >> 1

IRs:
TMP_483(uint256) = a / xn
TMP_484(uint256) = xn + TMP_483
TMP_485(uint256) = TMP_484 >> 1
xn(uint256) := TMP_485(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
xn = (xn + a / xn) >> 1

IRs:
TMP_486(uint256) = a / xn
TMP_487(uint256) = xn + TMP_486
TMP_488(uint256) = TMP_487 >> 1
xn(uint256) := TMP_488(uint256)"];
35->36;
36[label="Node Type: EXPRESSION 36

EXPRESSION:
xn = (xn + a / xn) >> 1

IRs:
TMP_489(uint256) = a / xn
TMP_490(uint256) = xn + TMP_489
TMP_491(uint256) = TMP_490 >> 1
xn(uint256) := TMP_491(uint256)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
xn = (xn + a / xn) >> 1

IRs:
TMP_492(uint256) = a / xn
TMP_493(uint256) = xn + TMP_492
TMP_494(uint256) = TMP_493 >> 1
xn(uint256) := TMP_494(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
xn = (xn + a / xn) >> 1

IRs:
TMP_495(uint256) = a / xn
TMP_496(uint256) = xn + TMP_495
TMP_497(uint256) = TMP_496 >> 1
xn(uint256) := TMP_497(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
xn = (xn + a / xn) >> 1

IRs:
TMP_498(uint256) = a / xn
TMP_499(uint256) = xn + TMP_498
TMP_500(uint256) = TMP_499 >> 1
xn(uint256) := TMP_500(uint256)"];
39->40;
40[label="Node Type: RETURN 40

EXPRESSION:
xn - toUint(xn > a / xn)

IRs:
TMP_501(uint256) = a / xn
TMP_502(bool) = xn > TMP_501
TMP_503(uint256) = INTERNAL_CALL, SafeMath.toUint(bool)(TMP_502)
TMP_504(uint256) = xn - TMP_503
RETURN TMP_504"];
}
