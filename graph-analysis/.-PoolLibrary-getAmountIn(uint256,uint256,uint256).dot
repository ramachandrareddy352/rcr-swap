digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_reserveIn > 0 && _reserveOut > 0,Pool Library: Insufficient liquidity)

IRs:
TMP_389(bool) = _reserveIn > 0
TMP_390(bool) = _reserveOut > 0
TMP_391(bool) = TMP_389 && TMP_390
TMP_392(None) = SOLIDITY_CALL require(bool,string)(TMP_391,Pool Library: Insufficient liquidity)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_amountOut < _reserveOut,Pool Library : Invalid amountOut)

IRs:
TMP_393(bool) = _amountOut < _reserveOut
TMP_394(None) = SOLIDITY_CALL require(bool,string)(TMP_393,Pool Library : Invalid amountOut)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
numerator = _reserveIn.mul(_amountOut)

IRs:
TMP_395(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_reserveIn', '_amountOut'] 
numerator(uint256) := TMP_395(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
denominator = _reserveOut.sub(_amountOut)

IRs:
TMP_396(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_reserveOut', '_amountOut'] 
denominator(uint256) := TMP_396(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
amountIn = numerator.div(denominator)

IRs:
TMP_397(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['numerator', 'denominator'] 
amountIn(uint256) := TMP_397(uint256)"];
}
