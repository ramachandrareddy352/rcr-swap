digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
result = 0

IRs:
result(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
exp = 128 * toUint(value > (1 << 128) - 1)

IRs:
TMP_505(uint256) = 1 << 128
TMP_506(uint256) = TMP_505 - 1
TMP_507(bool) = value > TMP_506
TMP_508(uint256) = INTERNAL_CALL, SafeMath.toUint(bool)(TMP_507)
TMP_509(uint256) = 128 * TMP_508
exp(uint256) := TMP_509(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
value >>= exp

IRs:
value(uint256) = value >> exp"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
result += exp

IRs:
result(uint256) = result + exp"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
exp = 64 * toUint(value > (1 << 64) - 1)

IRs:
TMP_510(uint256) = 1 << 64
TMP_511(uint256) = TMP_510 - 1
TMP_512(bool) = value > TMP_511
TMP_513(uint256) = INTERNAL_CALL, SafeMath.toUint(bool)(TMP_512)
TMP_514(uint256) = 64 * TMP_513
exp(uint256) := TMP_514(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
value >>= exp

IRs:
value(uint256) = value >> exp"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
result += exp

IRs:
result(uint256) = result + exp"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
exp = 32 * toUint(value > (1 << 32) - 1)

IRs:
TMP_515(uint256) = 1 << 32
TMP_516(uint256) = TMP_515 - 1
TMP_517(bool) = value > TMP_516
TMP_518(uint256) = INTERNAL_CALL, SafeMath.toUint(bool)(TMP_517)
TMP_519(uint256) = 32 * TMP_518
exp(uint256) := TMP_519(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
value >>= exp

IRs:
value(uint256) = value >> exp"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
result += exp

IRs:
result(uint256) = result + exp"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
exp = 16 * toUint(value > (1 << 16) - 1)

IRs:
TMP_520(uint256) = 1 << 16
TMP_521(uint256) = TMP_520 - 1
TMP_522(bool) = value > TMP_521
TMP_523(uint256) = INTERNAL_CALL, SafeMath.toUint(bool)(TMP_522)
TMP_524(uint256) = 16 * TMP_523
exp(uint256) := TMP_524(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
value >>= exp

IRs:
value(uint256) = value >> exp"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
result += exp

IRs:
result(uint256) = result + exp"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
exp = 8 * toUint(value > (1 << 8) - 1)

IRs:
TMP_525(uint256) = 1 << 8
TMP_526(uint256) = TMP_525 - 1
TMP_527(bool) = value > TMP_526
TMP_528(uint256) = INTERNAL_CALL, SafeMath.toUint(bool)(TMP_527)
TMP_529(uint256) = 8 * TMP_528
exp(uint256) := TMP_529(uint256)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
value >>= exp

IRs:
value(uint256) = value >> exp"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
result += exp

IRs:
result(uint256) = result + exp"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
exp = 4 * toUint(value > (1 << 4) - 1)

IRs:
TMP_530(uint256) = 1 << 4
TMP_531(uint256) = TMP_530 - 1
TMP_532(bool) = value > TMP_531
TMP_533(uint256) = INTERNAL_CALL, SafeMath.toUint(bool)(TMP_532)
TMP_534(uint256) = 4 * TMP_533
exp(uint256) := TMP_534(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
value >>= exp

IRs:
value(uint256) = value >> exp"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
result += exp

IRs:
result(uint256) = result + exp"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
exp = 2 * toUint(value > (1 << 2) - 1)

IRs:
TMP_535(uint256) = 1 << 2
TMP_536(uint256) = TMP_535 - 1
TMP_537(bool) = value > TMP_536
TMP_538(uint256) = INTERNAL_CALL, SafeMath.toUint(bool)(TMP_537)
TMP_539(uint256) = 2 * TMP_538
exp(uint256) := TMP_539(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
value >>= exp

IRs:
value(uint256) = value >> exp"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
result += exp

IRs:
result(uint256) = result + exp"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
result += toUint(value > 1)

IRs:
TMP_540(bool) = value > 1
TMP_541(uint256) = INTERNAL_CALL, SafeMath.toUint(bool)(TMP_540)
result(uint256) = result + TMP_541"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
result

IRs:
RETURN result"];
}
