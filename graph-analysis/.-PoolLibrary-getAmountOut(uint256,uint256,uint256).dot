digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_reserveIn > 0 && _reserveOut > 0,Pool Library: Insufficient reserves)

IRs:
TMP_380(bool) = _reserveIn > 0
TMP_381(bool) = _reserveOut > 0
TMP_382(bool) = TMP_380 && TMP_381
TMP_383(None) = SOLIDITY_CALL require(bool,string)(TMP_382,Pool Library: Insufficient reserves)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_amountIn < _reserveIn,Pool Library : Invalid amountOut)

IRs:
TMP_384(bool) = _amountIn < _reserveIn
TMP_385(None) = SOLIDITY_CALL require(bool,string)(TMP_384,Pool Library : Invalid amountOut)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
numenator = _reserveOut.mul(_amountIn)

IRs:
TMP_386(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_reserveOut', '_amountIn'] 
numenator(uint256) := TMP_386(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
denominator = _reserveIn.add(_amountIn)

IRs:
TMP_387(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_reserveIn', '_amountIn'] 
denominator(uint256) := TMP_387(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
amountOut = numenator.div(denominator)

IRs:
TMP_388(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['numenator', 'denominator'] 
amountOut(uint256) := TMP_388(uint256)"];
}
