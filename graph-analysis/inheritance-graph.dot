digraph "" {
    Factory -> Ownable;
    Factory [shape = "box";label = < <TABLE border="0"><TR><TD align="center"><B>Factory</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    createPool(address,address,uint256)</TD></TR><TR><TD align="left">    setTicks(address[],address[],uint256[])</TD></TR><TR><TD align="left">    getOwnerPools(address)</TD></TR><TR><TD align="left">    getPoolData(address)</TD></TR><TR><TD align="left">    getPool(uint256)</TD></TR><TR><TD align="left">    getTick(address,address)</TD></TR><TR><TD align="left">    getPair(address,address,uint256)</TD></TR><TR><TD align="left">    getAllPoolsAddress()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _setTick(address,address,uint256)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    MAX_POOL_FEE</TD></TR><TR><TD align="left">    MIN_POOL_FEE</TD></TR><TR><TD align="left">    MAX_TICK</TD></TR><TR><TD align="left">    s_poolCount</TD></TR><TR><TD align="left">    s_allPools</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    s_getPair</TD></TR><TR><TD align="left">    s_getTick</TD></TR><TR><TD align="left">    s_Pools</TD></TR><TR><TD align="left">    s_getPoolData</TD></TR><TR><TD align="left">    s_ownerPools</TD></TR></TABLE> >;];
    
    LP_ERC20 [shape = "box";label = < <TABLE border="0"><TR><TD align="center"><B>LP_ERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _transfer(address,address,uint256)</TD></TR><TR><TD align="left">    _update(address,address,uint256)</TD></TR><TR><TD align="left">    _mint(address,uint256)</TD></TR><TR><TD align="left">    _burn(address,uint256)</TD></TR><TR><TD align="left">    _approve(address,address,uint256)</TD></TR><TR><TD align="left">    _approve(address,address,uint256,bool)</TD></TR><TR><TD align="left">    _spendAllowance(address,address,uint256)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    balanceOf</TD></TR><TR><TD align="left">    allowance</TD></TR><TR><TD align="left">    totalSupply</TD></TR><TR><TD align="left">    name</TD></TR><TR><TD align="left">    symbol</TD></TR><TR><TD align="left">    decimals</TD></TR></TABLE> >;];
    
    Pool -> LP_ERC20 [label = "1";];
    Pool -> ReentrancyGuard [label = "2";];
    Pool [shape = "box";label = < <TABLE border="0"><TR><TD align="center"><B>Pool</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    _addLiquidity(uint256,uint256,uint256,uint256,uint256,uint256)</TD></TR><TR><TD align="left">    _mintLiquidity(uint256,uint256,uint256,uint256)</TD></TR><TR><TD align="left">    addLiquidity(uint256,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    _removeLiquidity(uint256,uint256,uint256,address,address,address)</TD></TR><TR><TD align="left">    removeLiquidity(uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    swapTokensExactInput(uint256,uint256,address,address,address,uint256)</TD></TR><TR><TD align="left">    swapTokensExactOutput(uint256,uint256,address,address,address,uint256)</TD></TR><TR><TD align="left">    mintLiquidity(address,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _safeTransfer(address,address,uint256)</TD></TR><TR><TD align="left">    _safeTransferFrom(address,address,address,uint256)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    ensure(uint256)</TD></TR><TR><TD align="left">    zeroAddress(address)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    MINIMUM_LIQUIDITY</TD></TR><TR><TD align="left">    FACTORY</TD></TR><TR><TD align="left">    TOKENA</TD></TR><TR><TD align="left">    TOKENB</TD></TR><TR><TD align="left">    FEE</TD></TR><TR><TD align="left">    TICK</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    TRANSFER_SELECTOR</TD></TR><TR><TD align="left">    TRANSFER_FROM_SELECTOR</TD></TR></TABLE> >;];
    
    IERC20 [shape = "box";label = < <TABLE border="0"><TR><TD align="center"><B>IERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    decimals()</TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >;];
    
    IFactory [shape = "box";label = < <TABLE border="0"><TR><TD align="center"><B>IFactory</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    MAX_POOL_FEE()</TD></TR><TR><TD align="left">    MIN_POOL_FEE()</TD></TR><TR><TD align="left">    MAX_TICK()</TD></TR><TR><TD align="left">    getOwnerPools(address)</TD></TR><TR><TD align="left">    getPoolData(address)</TD></TR><TR><TD align="left">    getPool(uint256)</TD></TR><TR><TD align="left">    getTick(address,address)</TD></TR><TR><TD align="left">    getPair(address,address,uint256)</TD></TR><TR><TD align="left">    s_poolCount()</TD></TR><TR><TD align="left">    owner()</TD></TR><TR><TD align="left">    getAllPoolsAddress()</TD></TR><TR><TD align="left">    createPool(address,address,uint256)</TD></TR><TR><TD align="left">    setTicks(address[],address[],uint256[])</TD></TR><TR><TD align="left">    transferOwnership(address)</TD></TR></TABLE> >;];
    
    IPool [shape = "box";label = < <TABLE border="0"><TR><TD align="center"><B>IPool</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    FACTORY()</TD></TR><TR><TD align="left">    TOKENA()</TD></TR><TR><TD align="left">    TOKENB()</TD></TR><TR><TD align="left">    TICK()</TD></TR><TR><TD align="left">    FEE()</TD></TR><TR><TD align="left">    _addLiquidity(uint256,uint256,uint256,uint256)</TD></TR><TR><TD align="left">    _mintLiquidity(uint256,uint256)</TD></TR><TR><TD align="left">    addLiquidity(uint256,uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    _removeLiquidity(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    removeLiquidity(uint256,uint256,uint256,address,uint256)</TD></TR><TR><TD align="left">    swapTokensExactInput(uint256,uint256,address,address,address,uint256)</TD></TR><TR><TD align="left">    swapTokensExactOutput(uint256,uint256,address,address,address,uint256)</TD></TR></TABLE> >;];
    
    PoolLibrary [shape = "box";label = < <TABLE border="0"><TR><TD align="center"><B>PoolLibrary</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    quote(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    getAmountOut(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    getAmountIn(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    getCurrentPrice(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    getPriceRange(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    getAmountFee(uint256,uint256)</TD></TR></TABLE> >;];
    
    SafeCast [shape = "box";label = < <TABLE border="0"><TR><TD align="center"><B>SafeCast</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    toInt256(uint256)</TD></TR><TR><TD align="left">    toUint256(int256)</TD></TR></TABLE> >;];
    
    SafeMath [shape = "box";label = < <TABLE border="0"><TR><TD align="center"><B>SafeMath</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    add(uint256,uint256)</TD></TR><TR><TD align="left">    sub(uint256,uint256)</TD></TR><TR><TD align="left">    mul(uint256,uint256)</TD></TR><TR><TD align="left">    div(uint256,uint256)</TD></TR><TR><TD align="left">    mod(uint256,uint256)</TD></TR><TR><TD align="left">    max(uint256,uint256)</TD></TR><TR><TD align="left">    min(uint256,uint256)</TD></TR><TR><TD align="left">    average(uint256,uint256)</TD></TR><TR><TD align="left">    add(int256,int256)</TD></TR><TR><TD align="left">    sub(int256,int256)</TD></TR><TR><TD align="left">    sqrt(uint256)</TD></TR><TR><TD align="left">    log2(uint256)</TD></TR><TR><TD align="left">    log10(uint256)</TD></TR><TR><TD align="left">    toUint(bool)</TD></TR></TABLE> >;];
    
    Ownable [shape = "box";label = < <TABLE border="0"><TR><TD align="center"><B>Ownable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    owner()</TD></TR><TR><TD align="left">    transferOwnership(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _checkOwner()</TD></TR><TR><TD align="left">    _transferOwnership(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyOwner()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _owner</TD></TR></TABLE> >;];
    
    ReentrancyGuard [shape = "box";label = < <TABLE border="0"><TR><TD align="center"><B>ReentrancyGuard</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _nonReentrantBefore()</TD></TR><TR><TD align="left">    _nonReentrantAfter()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    nonReentrant()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    NOT_ENTERED</TD></TR><TR><TD align="left">    ENTERED</TD></TR><TR><TD align="left">    _status</TD></TR></TABLE> >;];
}